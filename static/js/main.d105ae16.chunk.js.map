{"version":3,"sources":["components/WithLibrariesCarousel/WithLibrariesCarousel.js","components/WithoutLibrariesCarousel/WithoutLibrariesCarousel.js","data/images.js","components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["WithLibrariesCarousel","props","Container","className","UncontrolledCarousel","items","WithoutLibrariesCarousel","resetInterval","clearInterval","interval","setInterval","next","current","state","setState","length","prev","change","index","this","prevProps","prevState","onClick","key","src","alt","map","item","btnClass","Component","images","altText","Header","Jumbotron","fluid","Navbar","color","light","expand","Nav","navbar","NavItem","to","App","basename","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d105ae16.chunk.js","sourcesContent":["import React from \"react\";\nimport { Container, UncontrolledCarousel } from \"reactstrap\";\nimport \"./WithLibrariesCarousel.css\";\nexport const WithLibrariesCarousel = (props) => {\n  return (\n    <Container className=\"carousel-container\">\n      <UncontrolledCarousel items={props.items} />\n    </Container>\n  );\n};\n","import React, { Component } from \"react\";\nimport \"./WithoutLibrariesCarousel.css\";\n\nexport class WithoutLibrariesCarousel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      current: 0\n    };\n  }\n  // Sets interval at 5000, so the picture changes every five seconds\n  resetInterval = () => {\n    clearInterval(this.interval);\n    this.interval = setInterval(() => this.next(), 5000);\n  }\n  componentDidMount() {\n    this.resetInterval();\n  }\n  // resets interval every time a new picture is shown\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.current !== this.state.current) {\n      this.resetInterval();\n    }\n  }\n  // Clears timer to prevent errors and memory leaks\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  // goes to next image, or first image if the current image is the last one\n  next = () => {\n    const current = this.state.current;\n    this.setState({ current: current === this.props.items.length - 1 ? 0 : current + 1 });\n  };\n  // goes to previous image, or last image if the current image is the first one\n  prev = () => {\n    const current = this.state.current;\n    this.setState({ current: current === 0 ? this.props.items.length - 1 : current - 1 });\n  };\n  // changes the current image\n  change = index => {\n    this.setState({ current: index });\n  };\n  render() {\n    const { current } = this.state;\n    const { items } = this.props;\n    return (\n      <div className=\"container wo-libraries-container\">\n        <div className=\"wo-libraries-carousel\">\n          <button className=\"prev-btn\" onClick={this.prev}>\n            &lt;\n          </button>\n          <img\n            key={items[current].src}\n            src={items[current].src}\n            alt={items[current].alt}\n            className=\"wo-libraries-image transition\"\n          />\n          <button className=\"next-btn\" onClick={this.next}>\n            &gt;\n          </button>\n        </div>\n        <div className=\"wo-libraries-selectors\">\n          {items.map((item, index) => {\n            let btnClass = \"carousel-selector\";\n            index === current && (btnClass += \" current\");\n            return <button key={item.src} className={btnClass} onClick={() => this.change(index)}></button>;\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n","export const images = [\n  {\n    src: \"https://mms.businesswire.com/media/20181207005077/en/694636/23/Avochato_logo.jpg\",\n    altText: \"Avocado 1\"\n  },\n  {\n    src: \"https://images.agoramedia.com/everydayhealth/gcms/All-About-Avocados--Health-Benefits-Nutrition-Facts-How-to-Eat-722x406.jpg\",\n    altText: \"Avocado 2\"\n  },\n  {\n    src:\n      \"https://ksassets.timeincuk.net/wp/uploads/sites/46/2018/07/New-Project-2019-07-17T150924.311-920x518.jpg\",\n    altText: \"Avocado 3\"\n  },\n  {\n    src: \"https://www.jessicagavin.com/wp-content/uploads/2019/04/avocados-3-600x900.jpg\",\n    altText: \"Avocado 4\"\n  },\n  {\n    src: \"https://sweetpeasandsaffron.com/wp-content/uploads/2019/02/how-to-cut-an-avocado-3.jpg\",\n    altText: \"Avocado 5\"\n  }\n];\n","import React from \"react\";\nimport { Jumbotron, Container, Nav, Navbar, NavItem } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\nimport \"./Header.css\";\n\nexport const Header = () => {\n  return (\n    <div>\n      <Jumbotron className=\"header-jumbotron\" fluid>\n        <Container fluid>\n          <h1 className=\"display-3\">Image Carousel</h1>\n        </Container>\n      </Jumbotron>\n      <Navbar className=\"header-navbar\" color=\"light\" light expand=\"md\">\n        <Nav navbar>\n          <NavItem>\n            <Link to=\"/with-libraries\" className=\"nav-link\">\n              With Libraries\n            </Link>\n          </NavItem>\n          <NavItem>\n            <Link to=\"without-libraries\" className=\"nav-link\">\n              Without Libraries\n            </Link>\n          </NavItem>\n        </Nav>\n      </Navbar>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport { WithLibrariesCarousel } from \"./components/WithLibrariesCarousel/WithLibrariesCarousel\";\nimport { WithoutLibrariesCarousel } from \"./components/WithoutLibrariesCarousel/WithoutLibrariesCarousel\";\nimport { images } from \"./data/images.js\";\nimport { Header } from \"./components/Header/Header\";\n\nfunction App() {\n  return (\n    <div>\n      <HashRouter basename=\"/\">\n        <Header />\n        <Route exact path=\"/\" render={() => <WithLibrariesCarousel items={images} />} />\n        <Route path=\"/with-libraries\" render={() => <WithLibrariesCarousel items={images} />} />\n        <Route path=\"/without-libraries\" render={() => <WithoutLibrariesCarousel items={images} />} />\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App basename={process.env.PUBLIC_URL} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}